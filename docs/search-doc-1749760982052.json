{"searchDocs":[{"title":"modules","type":0,"sectionRef":"#","url":"/functions/modules","content":"","keywords":"","version":"Next"},{"title":"Modulesâ€‹","type":1,"pageTitle":"modules","url":"/functions/modules#modules","content":" fmgit0github-api ","version":"Next","tagName":"h2"},{"title":"fm","type":0,"sectionRef":"#","url":"/functions/fm","content":"fm Documentation / fm","keywords":"","version":"Next"},{"title":"Git0: Download Git Repo on Step Zero","type":0,"sectionRef":"#","url":"/functions/","content":"","keywords":"","version":"Next"},{"title":"ðŸš€ Installationâ€‹","type":1,"pageTitle":"Git0: Download Git Repo on Step Zero","url":"/functions/#-installation","content":" npm install -g git0   bun install -g git0     ","version":"Next","tagName":"h2"},{"title":"âœ¨ Featuresâ€‹","type":1,"pageTitle":"Git0: Download Git Repo on Step Zero","url":"/functions/#-features","content":" Search GitHub repositories by name with fuzzy matchingDownload repositories directly from GitHub URLs or owner/repo shortcuts. Skip the manual git clone, cd, install danceGet Releases instantly download latest release for your system or all systemsAutomatic dependency installation and installation for multiple project typesSmart IDE integration - automatically opens projects in your preferred editorCross-platform support - works on Windows, macOS, and LinuxConflict resolution - handles directory naming conflicts automaticallyFaster than git - skips .git history and uncompresses while downloading  ","version":"Next","tagName":"h2"},{"title":"ðŸŽ¯ Usageâ€‹","type":1,"pageTitle":"Git0: Download Git Repo on Step Zero","url":"/functions/#-usage","content":"  # Direct download from GitHub URL ## g and git0 both work g https://github.com/facebook/react # Search for repositories by name g react starter # Download using owner/repo shorthand git0 facebook/react # Use git0 without installing, (only node needed) # (copy this line into your project's readme to help others setup) npx git0 facebook/react   ","version":"Next","tagName":"h2"},{"title":"Supported Project Typesâ€‹","type":1,"pageTitle":"Git0: Download Git Repo on Step Zero","url":"/functions/#supported-project-types","content":" git0 automatically detects and sets up the following project types:  Project Type\tDetection\tInstallationNode.js\tpackage.json\tbun install (fallback to npm install) Docker\tDockerfile, docker-compose.yml\tdocker-compose up -d or docker build Python\trequirements.txt, setup.py\tVirtual environment + pip install Rust\tCargo.toml\tcargo build Go\tgo.mod\tgo mod tidy  ","version":"Next","tagName":"h3"},{"title":"Supported IDEsâ€‹","type":1,"pageTitle":"Git0: Download Git Repo on Step Zero","url":"/functions/#supported-ides","content":" git0 automatically detects and opens projects in your preferred IDE:  Cursor (cursor)Windsurf (windsurf)VS Code (code)Code Server (code-server)Neovim (nvim)Webstorm (webstorm)  ","version":"Next","tagName":"h3"},{"title":"ðŸ”§ Configurationâ€‹","type":1,"pageTitle":"Git0: Download Git Repo on Step Zero","url":"/functions/#-configuration","content":" ","version":"Next","tagName":"h2"},{"title":"What Happens After Downloadâ€‹","type":1,"pageTitle":"Git0: Download Git Repo on Step Zero","url":"/functions/#what-happens-after-download","content":" Repository is downloaded to your current directoryProject type is detected automaticallyDependencies are installed based on project typeIDE is launched automatically (if available)Development server starts (for Node.js projects)  If a directory with the same name exists, git0 automatically appends a number (e.g., react-2, react-3).  ","version":"Next","tagName":"h3"},{"title":"GitHub Token (Optional)â€‹","type":1,"pageTitle":"Git0: Download Git Repo on Step Zero","url":"/functions/#github-token-optional","content":" For higher API rate limits, set your GitHub token:  export GITHUB_TOKEN=your_github_token_here   Without a token, you're limited to 60 requests per hour. With a token, you get 5,000 requests per hour. ","version":"Next","tagName":"h3"},{"title":"git0","type":0,"sectionRef":"#","url":"/functions/git0","content":"","keywords":"","version":"Next"},{"title":"installDependencies()â€‹","type":1,"pageTitle":"git0","url":"/functions/git0#installdependencies","content":" function installDependencies(targetDir: string): Promise&lt;void&gt;;   Defined in: src/git0.js:207  Automatically detects project type and installs dependencies Supports Node.js, Docker, Python, Rust, and Go projects  ","version":"Next","tagName":"h2"},{"title":"Parametersâ€‹","type":1,"pageTitle":"git0","url":"/functions/git0#parameters","content":" Parameter\tType\tDescription targetDir string Path to the project directory  ","version":"Next","tagName":"h3"},{"title":"Returnsâ€‹","type":1,"pageTitle":"git0","url":"/functions/git0#returns","content":" Promise&lt;void&gt;  ","version":"Next","tagName":"h3"},{"title":"Exportâ€‹","type":1,"pageTitle":"git0","url":"/functions/git0#export","content":" ","version":"Next","tagName":"h3"},{"title":"Asyncâ€‹","type":1,"pageTitle":"git0","url":"/functions/git0#async","content":"   ","version":"Next","tagName":"h3"},{"title":"openInIDE()â€‹","type":1,"pageTitle":"git0","url":"/functions/git0#openinide","content":" function openInIDE(targetDir: string): void;   Defined in: src/git0.js:157  Opens a directory in the first available IDE/editor Also attempts to open a README or package.json file after 3 seconds  ","version":"Next","tagName":"h2"},{"title":"Parametersâ€‹","type":1,"pageTitle":"git0","url":"/functions/git0#parameters-1","content":" Parameter\tType\tDescription targetDir string Path to the directory to open  ","version":"Next","tagName":"h3"},{"title":"Returnsâ€‹","type":1,"pageTitle":"git0","url":"/functions/git0#returns-1","content":" void  ","version":"Next","tagName":"h3"},{"title":"Exportâ€‹","type":1,"pageTitle":"git0","url":"/functions/git0#export-1","content":"","version":"Next","tagName":"h3"},{"title":"github-api","type":0,"sectionRef":"#","url":"/functions/github-api","content":"","keywords":"","version":"Next"},{"title":"defaultâ€‹","type":1,"pageTitle":"github-api","url":"/functions/github-api#default","content":" Defined in: src/github-api.js:17  GitHub API client for downloading repositories, searching, and managing releases GithubAPI  ","version":"Next","tagName":"h2"},{"title":"Exampleâ€‹","type":1,"pageTitle":"github-api","url":"/functions/github-api#example","content":" const github = new GithubAPI(); const repos = await github.searchRepositories('nodejs'); await github.downloadRepo('user/repo', './my-downloads');   ","version":"Next","tagName":"h3"},{"title":"Constructorsâ€‹","type":1,"pageTitle":"github-api","url":"/functions/github-api#constructors","content":" Constructorâ€‹  new default(options?: object): default;   Defined in: src/github-api.js:36  Creates a new GithubAPI instance  Parametersâ€‹  Parameter\tType\tDescription options? { baseURL?: string; debug?: boolean; token?: string; } Configuration options options.baseURL? string GitHub API base URL options.debug? boolean Enable debug logging options.token? string GitHub personal access token (defaults to GITHUB_TOKEN env var)  Returnsâ€‹  default  Exampleâ€‹  // Use default settings with environment token // Use custom token const github = new GithubAPI({ token: 'ghp_xxxxxxxxxxxx' }); // Enable debug mode const github = new GithubAPI({ debug: true });   ","version":"Next","tagName":"h3"},{"title":"Propertiesâ€‹","type":1,"pageTitle":"github-api","url":"/functions/github-api#properties","content":" baseURLâ€‹  baseURL: string;   Defined in: src/github-api.js:39  callGithub()â€‹  callGithub: (path: any, options?: object) =&gt; Promise&lt;{ [key: string]: unknown; }&gt;;   Defined in: src/github-api.js:41  Parametersâ€‹  Parameter\tType path any options? { }  Returnsâ€‹  Promise&lt;{ [key: string]: unknown; }&gt;  debugâ€‹  debug: boolean;   Defined in: src/github-api.js:38  tokenâ€‹  token: string;   Defined in: src/github-api.js:37  DEFAULT_RESULTS_PER_PAGEâ€‹  static DEFAULT_RESULTS_PER_PAGE: number = 10;   Defined in: src/github-api.js:19  Constantâ€‹  Number of results to return per page for repository searches  ","version":"Next","tagName":"h3"},{"title":"Methodsâ€‹","type":1,"pageTitle":"github-api","url":"/functions/github-api#methods","content":" downloadPackage()â€‹  downloadPackage(packageURL: any, downloadPath: string): Promise&lt;string&gt;;   Defined in: src/github-api.js:189  Downloads a release asset from GitHub and provides installation instructions  Parametersâ€‹  Parameter\tType\tDescription packageURL any Download URL for the asset downloadPath string Directory to download the asset to  Returnsâ€‹  Promise&lt;string&gt;  Path to the downloaded file  Throwsâ€‹  When download fails  Exampleâ€‹  const asset = 'https://github.com/user/repo/releases/download/v1.0.0/myapp-v1.0.0-linux-x64' const downloadPath = await github.downloadPackage(asset, './downloads/myapp');   downloadRepo()â€‹  downloadRepo(repo: string, targetDir?: string): Promise&lt;string&gt;;   Defined in: src/github-api.js:70  Downloads a GitHub repository as a tarball and extracts it to a local directory  Parametersâ€‹  Parameter\tType\tDefault value\tDescription repo string undefined Repository URL or owner/name format targetDir? string null Target directory name (defaults to repo name)  Returnsâ€‹  Promise&lt;string&gt;  Path to the extracted repository directory  Throwsâ€‹  When repository download fails  Exampleâ€‹  // Download repository to current directory const repoPath = await github.downloadRepo('https://github.com/user/repo'); // Download to specific directory const repoPath = await github.downloadRepo('user/repo', 'my-custom-dir');   getCompatibleReleases()â€‹  getCompatibleReleases(owner: string, repo: string): Promise&lt;any[]&gt;;   Defined in: src/github-api.js:310  Gets releases compatible with the current platform  Parametersâ€‹  Parameter\tType\tDescription owner string Repository owner repo string Repository name  Returnsâ€‹  Promise&lt;any[]&gt;  Array of compatible releases  Exampleâ€‹  const compatible = await github.getCompatibleReleases('user', 'repo'); console.log(`Found ${compatible.length} compatible releases`);   getCurrentPlatform()â€‹  getCurrentPlatform(): any;   Defined in: src/github-api.js:262  Detects the current operating system and architecture  Returnsâ€‹  any  Platform information object  Exampleâ€‹  const platform = github.getCurrentPlatform(); console.log(`Running on ${platform.os} ${platform.arch}`);   getReleases()â€‹  getReleases(owner: string, repo: string): Promise&lt;any[]&gt;;   Defined in: src/github-api.js:296  Gets repository releases with platform categorization  Parametersâ€‹  Parameter\tType\tDescription owner string Repository owner repo string Repository name  Returnsâ€‹  Promise&lt;any[]&gt;  Array of categorized releases  Exampleâ€‹  const releases = await github.getReleases('microsoft', 'vscode'); console.log(`Found ${releases.length} releases`);   parseURL()â€‹  parseURL(query: string): any;   Defined in: src/github-api.js:241  Parses a GitHub URL or shorthand repository reference  Parametersâ€‹  Parameter\tType\tDescription query string GitHub URL or owner/repo format  Returnsâ€‹  any  Parsed git URL object or false if invalid  Exampleâ€‹  // Parse full URL const parsed = github.parseURL('https://github.com/user/repo'); // Parse shorthand const parsed = github.parseURL('user/repo'); if (parsed) { console.log(`Owner: ${parsed.owner}, Name: ${parsed.name}`); }   searchRepositories()â€‹  searchRepositories(query: string, options?: object): Promise&lt;any[]&gt;;   Defined in: src/github-api.js:131  Searches for GitHub repositories by name and enriches results with release information  Parametersâ€‹  Parameter\tType\tDescription query string Search query for repository names options? { getReleaseInfo?: number; order?: string; perPage?: number; sort?: string; } Search options options.getReleaseInfo? number Should also check releases for each result options.order? string Sort order (asc, desc) options.perPage? number Number of results per page (defaults to DEFAULT_RESULTS_PER_PAGE) options.sort? string Sort field (stars, forks, updated)  Returnsâ€‹  Promise&lt;any[]&gt;  Array of repository objects with release information  Throwsâ€‹  When search fails  Exampleâ€‹  const repos = await github.searchRepositories('nodejs'); repos.forEach(repo =&gt; { console.log(`${repo.name}: ${repo.hasReleases ? 'Has releases' : 'No releases'}`); }); // Custom search options const repos = await github.searchRepositories('react', { perPage: 5, sort: 'updated', order: 'desc' });  ","version":"Next","tagName":"h3"}],"options":{"id":"default"}}